# Sample queries to exercise the database.

# Get the keysace info
query GetKeyspace {
  keyspace(name: "graphql") {
    name
    dcs {
      name
      replicas
    }
    tables {
      name
      columns {
        name
        kind
        type {
          basic
          info {
            name
          }
        }
      }
    }
  }
}

# Query cutomer ID = 1
# Be sure to specify the keyspace in the URL:
# https://db350e3d-e35f-4dd7-89b7-8e9bfdad1c86-us-west-2.apps.astra.datastax.com/api/graphql/graphql
query customer1 {
  customers(value: { customer_id: 1 }) {
    values {
      customer_id
      name
    }
  }
}

# Get order 1
query order1 {
  customers(value: { order_id: 1 }) {
    values {
      order_id
      customer_id
      order_date
    }
  }
}

# Get the customer and order information at the same time
query customer1_orders {
  customers(value: { customer_id: 1 }) {
    values {
      customer_id
      name
    }
  }
  orders(value: { customer_id: 1 }) {
    values {
      order_id
      order_date
    }
  }
}

# Add a new order for customer 1
mutation {
  order3: insertorders(
    value: { order_id: 3, customer_id: 1, order_date: "2021-10-17T10:53:14.000" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      order_id
    }
  }
}

# Insert customer 2 with an order at the same time
mutation {
  customer: insertcustomers(
    value: { customer_id: 2, name: "Bob Hope" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      name
    }
  }
  order: insertorders(
    value: { order_id: 2, customer_id: 2, order_date: "2021-10-01T05:53:14.000" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      order_id
    }
  }
}

# ***********************************
#              With UUID
# ***********************************

# Get all customers
query customers {
  customers_uuid(value:{}) {
    values {
      customer_id
      name
    }
  }
}

# Create a customer using a UUID
mutation {
  customer: insertcustomers_uuid(
    value: { customer_id: "uuid()", name: "Lucille Ball" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      customer_id
      name
    }
  }
}

# Create an order for the customer we just created
# You have to set copy/paste the customer_id to make this work
mutation {
  newOrder: insertorders_uuid(
    value: { order_id: "uuid()", customer_id: "0064b734-b755-42cd-b1ae-a08123fd7251", order_date: "2021-10-13T15:06:14.000" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      order_id
      customer_id
      order_date
    }
  }
}

# Get this new customer and their orders
query lucilleball_orders {
  customers_uuid(value: { customer_id: "0064b734-b755-42cd-b1ae-a08123fd7251" }) {
    values {
      customer_id
      name
    }
  }
  orders_uuid(value: { customer_id: "0064b734-b755-42cd-b1ae-a08123fd7251" }) {
    values {
      order_id
      order_date
    }
  }
}

# Create a customer and an order at the same time
mutation create_customer_and_order($cust_id : Uuid = "uuid()") {
  customer: insertcustomers_uuid(
    value: { customer_id: $cust_id, name: "Harold Lloyd" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      customer_id
      name
    }
  }
  order: insertorders_uuid(
    value: { order_id: "uuid()", customer_id: $cust_id, order_date: "2021-10-02T05:53:14.000" }
    options: { consistency: LOCAL_QUORUM }
  ) {
    value {
      order_id
    }
  }
}

# Get orders for a specific customer ID
query customer_orders ($cust_id: Uuid = "0064b734-b755-42cd-b1ae-a08123fd7251"){
  customers_uuid(value: { customer_id: $cust_id }) {
    values {
      customer_id
      name
    }
  }
  orders_uuid(value: { customer_id: $cust_id }) {
    values {
      order_id
      order_date
    }
  }
}
